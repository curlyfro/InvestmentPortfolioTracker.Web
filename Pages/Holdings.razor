@page "/holdings"
@using InvestmentPortfolioTracker.Web.Services
@using InvestmentPortfolioTracker.Web.Models
@inject PortfolioService PortfolioService
@inject NavigationManager NavigationManager

<PageTitle>Holdings</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>All Holdings</h1>
    <a href="/add-holding" class="btn btn-primary">
        <span class="oi oi-plus"></span> Add New Holding
    </a>
</div>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading holdings...</p>
    </div>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>Error!</strong> @errorMessage
        <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
    </div>
}
else if (successMessage != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <strong>Success!</strong> @successMessage
        <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
    </div>
}

@if (holdings != null && holdings.Any())
{
    <!-- Filter Section -->
    <div class="card mb-3">
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <input type="text" class="form-control" placeholder="Filter by symbol or name..." 
                           @bind="filterText" @bind:event="oninput" @onkeyup="FilterHoldings" />
                </div>
                <div class="col-md-6">
                    <select class="form-select" @bind="filterType" @bind:after="FilterHoldings">
                        <option value="">All Types</option>
                        <option value="Stock">Stock</option>
                        <option value="ETF">ETF</option>
                        <option value="Crypto">Crypto</option>
                        <option value="Bond">Bond</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Holdings Table -->
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover table-striped">
                    <thead class="table-dark">
                        <tr>
                            <th @onclick='() => SortHoldings("Symbol")' style="cursor: pointer;">
                                Symbol @GetSortIcon("Symbol")
                            </th>
                            <th @onclick='() => SortHoldings("AssetName")' style="cursor: pointer;">
                                Name @GetSortIcon("AssetName")
                            </th>
                            <th>Type</th>
                            <th class="text-end">Quantity</th>
                            <th class="text-end">Purchase Price</th>
                            <th class="text-end">Current Price</th>
                            <th class="text-end">Current Value</th>
                            <th class="text-end">Gain/Loss</th>
                            <th class="text-end">%</th>
                            <th class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var holding in filteredHoldings)
                        {
                            <tr>
                                <td><strong>@holding.Symbol</strong></td>
                                <td>@holding.AssetName</td>
                                <td>
                                    <span class="badge @GetAssetTypeBadgeClass(holding.AssetType)">
                                        @holding.AssetType
                                    </span>
                                </td>
                                <td class="text-end">@holding.Quantity.ToString("N4")</td>
                                <td class="text-end">@holding.PurchasePrice.ToString("C2")</td>
                                <td class="text-end">
                                    @if (holding.CurrentPrice.HasValue)
                                    {
                                        @holding.CurrentPrice.Value.ToString("C2")
                                    }
                                    else
                                    {
                                        <span class="text-muted">N/A</span>
                                    }
                                </td>
                                <td class="text-end">
                                    @if (holding.CurrentValue.HasValue)
                                    {
                                        @holding.CurrentValue.Value.ToString("C2")
                                    }
                                    else
                                    {
                                        <span class="text-muted">N/A</span>
                                    }
                                </td>
                                <td class="text-end @GetGainLossClass(holding.GainLoss)">
                                    @if (holding.GainLoss.HasValue)
                                    {
                                        @holding.GainLoss.Value.ToString("C2")
                                    }
                                    else
                                    {
                                        <span class="text-muted">N/A</span>
                                    }
                                </td>
                                <td class="text-end @GetGainLossClass(holding.GainLoss)">
                                    @if (holding.GainLossPercent.HasValue)
                                    {
                                        @holding.GainLossPercent.Value.ToString("F2")<text>%</text>
                                    }
                                    else
                                    {
                                        <span class="text-muted">N/A</span>
                                    }
                                </td>
                                <td class="text-center">
                                    <button class="btn btn-sm btn-outline-primary me-1" 
                                            @onclick="() => EditHolding(holding.Id)">
                                        <span class="oi oi-pencil"></span>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" 
                                            @onclick="() => ShowDeleteConfirmation(holding)">
                                        <span class="oi oi-trash"></span>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="mt-3">
                <p class="text-muted">Showing @filteredHoldings.Count() of @holdings.Count() holdings</p>
            </div>
        </div>
    </div>
}
else if (!isLoading)
{
    <div class="alert alert-info" role="alert">
        <h4 class="alert-heading">No Holdings Found</h4>
        <p>You don't have any holdings yet. Get started by <a href="/add-holding" class="alert-link">adding your first holding</a>.</p>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteModal && holdingToDelete != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this holding?</p>
                    <div class="alert alert-warning">
                        <strong>@holdingToDelete.Symbol</strong> - @holdingToDelete.AssetName<br />
                        Quantity: @holdingToDelete.Quantity<br />
                        Cost Basis: @holdingToDelete.CostBasis.ToString("C2")
                    </div>
                    <p class="text-danger">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete" disabled="@isDeleting">
                        @if (isDeleting)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Holding>? holdings;
    private IEnumerable<Holding> filteredHoldings = Enumerable.Empty<Holding>();
    private bool isLoading = true;
    private bool isDeleting = false;
    private string? errorMessage;
    private string? successMessage;
    
    private string filterText = "";
    private string filterType = "";
    private string sortColumn = "Symbol";
    private bool sortAscending = true;

    private bool showDeleteModal = false;
    private Holding? holdingToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadHoldings();
    }

    private async Task LoadHoldings()
    {
        try
        {
            isLoading = true;
            var result = await PortfolioService.GetAllHoldingsAsync();
            holdings = result.ToList();
            filteredHoldings = holdings;
            ApplyFiltersAndSort();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load holdings: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterHoldings()
    {
        ApplyFiltersAndSort();
    }

    private void SortHoldings(string column)
    {
        if (sortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = column;
            sortAscending = true;
        }
        ApplyFiltersAndSort();
    }

    private void ApplyFiltersAndSort()
    {
        if (holdings == null) return;

        var filtered = holdings.AsEnumerable();

        // Apply text filter
        if (!string.IsNullOrWhiteSpace(filterText))
        {
            filtered = filtered.Where(h => 
                h.Symbol.Contains(filterText, StringComparison.OrdinalIgnoreCase) ||
                h.AssetName.Contains(filterText, StringComparison.OrdinalIgnoreCase));
        }

        // Apply type filter
        if (!string.IsNullOrWhiteSpace(filterType))
        {
            filtered = filtered.Where(h => h.AssetType == filterType);
        }

        // Apply sorting
        filtered = sortColumn switch
        {
            "Symbol" => sortAscending ? filtered.OrderBy(h => h.Symbol) : filtered.OrderByDescending(h => h.Symbol),
            "AssetName" => sortAscending ? filtered.OrderBy(h => h.AssetName) : filtered.OrderByDescending(h => h.AssetName),
            _ => filtered.OrderBy(h => h.Symbol)
        };

        filteredHoldings = filtered.ToList();
    }

    private string GetSortIcon(string column)
    {
        if (sortColumn != column) return "";
        return sortAscending ? "▲" : "▼";
    }

    private string GetGainLossClass(decimal? gainLoss)
    {
        if (!gainLoss.HasValue) return "";
        return gainLoss >= 0 ? "text-success fw-bold" : "text-danger fw-bold";
    }

    private string GetAssetTypeBadgeClass(string assetType)
    {
        return assetType switch
        {
            "Stock" => "bg-primary",
            "ETF" => "bg-info",
            "Crypto" => "bg-warning text-dark",
            "Bond" => "bg-success",
            _ => "bg-secondary"
        };
    }

    private void EditHolding(int id)
    {
        NavigationManager.NavigateTo($"/edit-holding/{id}");
    }

    private void ShowDeleteConfirmation(Holding holding)
    {
        holdingToDelete = holding;
        showDeleteModal = true;
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
        holdingToDelete = null;
    }

    private async Task ConfirmDelete()
    {
        if (holdingToDelete == null) return;

        try
        {
            isDeleting = true;
            var success = await PortfolioService.DeleteHoldingAsync(holdingToDelete.Id);
            
            if (success)
            {
                successMessage = $"Successfully deleted {holdingToDelete.Symbol}";
                showDeleteModal = false;
                holdingToDelete = null;
                await LoadHoldings();
            }
            else
            {
                errorMessage = "Failed to delete holding";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting holding: {ex.Message}";
        }
        finally
        {
            isDeleting = false;
        }
    }
}
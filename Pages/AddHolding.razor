@page "/add-holding"
@using InvestmentPortfolioTracker.Web.Services
@using InvestmentPortfolioTracker.Web.Models
@inject PortfolioService PortfolioService
@inject NavigationManager NavigationManager

<PageTitle>Add Holding</PageTitle>

<div class="row">
    <div class="col-md-8 offset-md-2">
        <div class="card">
            <div class="card-header">
                <h3 class="mb-0">Add New Holding</h3>
            </div>
            <div class="card-body">
                @if (errorMessage != null)
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <strong>Error!</strong> @errorMessage
                        <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                    </div>
                }

                <EditForm Model="@newHolding" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" />

                    <div class="mb-3">
                        <label for="symbol" class="form-label">Symbol/Ticker *</label>
                        <InputText id="symbol" class="form-control" @bind-Value="newHolding.Symbol" 
                                   placeholder="e.g., AAPL, BTC, VTSAX" />
                        <ValidationMessage For="@(() => newHolding.Symbol)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="assetName" class="form-label">Asset Name *</label>
                        <InputText id="assetName" class="form-control" @bind-Value="newHolding.AssetName" 
                                   placeholder="e.g., Apple Inc., Bitcoin" />
                        <ValidationMessage For="@(() => newHolding.AssetName)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="assetType" class="form-label">Asset Type *</label>
                        <InputSelect id="assetType" class="form-select" @bind-Value="newHolding.AssetType">
                            <option value="">-- Select Type --</option>
                            <option value="Stock">Stock</option>
                            <option value="ETF">ETF</option>
                            <option value="Crypto">Crypto</option>
                            <option value="Bond">Bond</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => newHolding.AssetType)" class="text-danger" />
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="quantity" class="form-label">Quantity *</label>
                                <InputNumber id="quantity" class="form-control" @bind-Value="newHolding.Quantity" 
                                           step="0.00000001" placeholder="0.00" />
                                <ValidationMessage For="@(() => newHolding.Quantity)" class="text-danger" />
                                <small class="form-text text-muted">Number of shares/units</small>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="purchasePrice" class="form-label">Purchase Price *</label>
                                <InputNumber id="purchasePrice" class="form-control" @bind-Value="newHolding.PurchasePrice" 
                                           step="0.01" placeholder="0.00" />
                                <ValidationMessage For="@(() => newHolding.PurchasePrice)" class="text-danger" />
                                <small class="form-text text-muted">Price per unit at purchase</small>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="purchaseDate" class="form-label">Purchase Date *</label>
                        <InputDate id="purchaseDate" class="form-control" @bind-Value="newHolding.PurchaseDate" />
                        <ValidationMessage For="@(() => newHolding.PurchaseDate)" class="text-danger" />
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="currentPrice" class="form-label">Current Price (Optional)</label>
                                <InputNumber id="currentPrice" class="form-control" @bind-Value="currentPriceInput" 
                                           step="0.01" placeholder="Leave empty if unknown" />
                                <small class="form-text text-muted">Current market price</small>
                            </div>
                        </div>
                    </div>

                    <!-- Cost Basis Preview -->
                    <div class="alert alert-info">
                        <h5>Cost Basis Preview</h5>
                        <p class="mb-0">
                            <strong>Total Investment:</strong> @GetCostBasisPreview()
                        </p>
                        @if (currentPriceInput.HasValue && currentPriceInput.Value > 0 && newHolding.Quantity > 0)
                        {
                            <p class="mb-0">
                                <strong>Current Value:</strong> @GetCurrentValuePreview()<br />
                                <strong>Gain/Loss:</strong> 
                                <span class="@GetGainLossClass()">@GetGainLossPreview()</span>
                            </p>
                        }
                    </div>

                    <div class="d-flex justify-content-between">
                        <button type="button" class="btn btn-secondary" @onclick="Cancel">
                            <span class="oi oi-circle-x"></span> Cancel
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            <span class="oi oi-check"></span> Add Holding
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private Holding newHolding = new Holding
    {
        PurchaseDate = DateTime.Today,
        CreatedAt = DateTime.UtcNow
    };

    private decimal? currentPriceInput;
    private bool isSubmitting = false;
    private string? errorMessage;

    private async Task HandleSubmit()
    {
        try
        {
            isSubmitting = true;
            errorMessage = null;

            // Set current price if provided
            if (currentPriceInput.HasValue && currentPriceInput.Value > 0)
            {
                newHolding.CurrentPrice = currentPriceInput.Value;
                newHolding.LastPriceUpdate = DateTime.UtcNow;
            }

            await PortfolioService.AddHoldingAsync(newHolding);
            
            // Navigate back to holdings page
            NavigationManager.NavigateTo("/holdings");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/holdings");
    }

    private string GetCostBasisPreview()
    {
        if (newHolding.Quantity > 0 && newHolding.PurchasePrice > 0)
        {
            var costBasis = newHolding.Quantity * newHolding.PurchasePrice;
            return costBasis.ToString("C2");
        }
        return "$0.00";
    }

    private string GetCurrentValuePreview()
    {
        if (currentPriceInput.HasValue && currentPriceInput.Value > 0 && newHolding.Quantity > 0)
        {
            var currentValue = newHolding.Quantity * currentPriceInput.Value;
            return currentValue.ToString("C2");
        }
        return "N/A";
    }

    private string GetGainLossPreview()
    {
        if (currentPriceInput.HasValue && currentPriceInput.Value > 0 && 
            newHolding.Quantity > 0 && newHolding.PurchasePrice > 0)
        {
            var costBasis = newHolding.Quantity * newHolding.PurchasePrice;
            var currentValue = newHolding.Quantity * currentPriceInput.Value;
            var gainLoss = currentValue - costBasis;
            var gainLossPercent = (gainLoss / costBasis) * 100;
            
            return $"{gainLoss:C2} ({gainLossPercent:F2}%)";
        }
        return "N/A";
    }

    private string GetGainLossClass()
    {
        if (currentPriceInput.HasValue && currentPriceInput.Value > 0 && 
            newHolding.Quantity > 0 && newHolding.PurchasePrice > 0)
        {
            var costBasis = newHolding.Quantity * newHolding.PurchasePrice;
            var currentValue = newHolding.Quantity * currentPriceInput.Value;
            var gainLoss = currentValue - costBasis;
            
            return gainLoss >= 0 ? "text-success fw-bold" : "text-danger fw-bold";
        }
        return "";
    }
}